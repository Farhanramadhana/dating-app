// Code generated by MockGen. DO NOT EDIT.
// Source: src/swipe/repository.go

// Package repository is a generated GoMock package.
package repository

import (
	database "dating-app/model/database"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepositoryInterface is a mock of RepositoryInterface interface.
type MockRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryInterfaceMockRecorder
}

// MockRepositoryInterfaceMockRecorder is the mock recorder for MockRepositoryInterface.
type MockRepositoryInterfaceMockRecorder struct {
	mock *MockRepositoryInterface
}

// NewMockRepositoryInterface creates a new mock instance.
func NewMockRepositoryInterface(ctrl *gomock.Controller) *MockRepositoryInterface {
	mock := &MockRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryInterface) EXPECT() *MockRepositoryInterfaceMockRecorder {
	return m.recorder
}

// GetAsFirstUserLikeProfiles mocks base method.
func (m *MockRepositoryInterface) GetAsFirstUserLikeProfiles(userID int) ([]database.SwipeMatches, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAsFirstUserLikeProfiles", userID)
	ret0, _ := ret[0].([]database.SwipeMatches)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAsFirstUserLikeProfiles indicates an expected call of GetAsFirstUserLikeProfiles.
func (mr *MockRepositoryInterfaceMockRecorder) GetAsFirstUserLikeProfiles(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAsFirstUserLikeProfiles", reflect.TypeOf((*MockRepositoryInterface)(nil).GetAsFirstUserLikeProfiles), userID)
}

// GetAsSecondUserLikeProfiles mocks base method.
func (m *MockRepositoryInterface) GetAsSecondUserLikeProfiles(userID int) ([]database.SwipeMatches, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAsSecondUserLikeProfiles", userID)
	ret0, _ := ret[0].([]database.SwipeMatches)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAsSecondUserLikeProfiles indicates an expected call of GetAsSecondUserLikeProfiles.
func (mr *MockRepositoryInterfaceMockRecorder) GetAsSecondUserLikeProfiles(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAsSecondUserLikeProfiles", reflect.TypeOf((*MockRepositoryInterface)(nil).GetAsSecondUserLikeProfiles), userID)
}

// GetSwipeMatches mocks base method.
func (m *MockRepositoryInterface) GetSwipeMatches(firstUserID, secondUserID int) (database.SwipeMatches, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSwipeMatches", firstUserID, secondUserID)
	ret0, _ := ret[0].(database.SwipeMatches)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSwipeMatches indicates an expected call of GetSwipeMatches.
func (mr *MockRepositoryInterfaceMockRecorder) GetSwipeMatches(firstUserID, secondUserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSwipeMatches", reflect.TypeOf((*MockRepositoryInterface)(nil).GetSwipeMatches), firstUserID, secondUserID)
}

// UpsertSwipeMatches mocks base method.
func (m *MockRepositoryInterface) UpsertSwipeMatches(swipeMatches database.SwipeMatches) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertSwipeMatches", swipeMatches)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertSwipeMatches indicates an expected call of UpsertSwipeMatches.
func (mr *MockRepositoryInterfaceMockRecorder) UpsertSwipeMatches(swipeMatches interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertSwipeMatches", reflect.TypeOf((*MockRepositoryInterface)(nil).UpsertSwipeMatches), swipeMatches)
}

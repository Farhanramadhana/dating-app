// Code generated by MockGen. DO NOT EDIT.
// Source: app/redis.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRedis is a mock of Redis interface.
type MockRedis struct {
	ctrl     *gomock.Controller
	recorder *MockRedisMockRecorder
}

// MockRedisMockRecorder is the mock recorder for MockRedis.
type MockRedisMockRecorder struct {
	mock *MockRedis
}

// NewMockRedis creates a new mock instance.
func NewMockRedis(ctrl *gomock.Controller) *MockRedis {
	mock := &MockRedis{ctrl: ctrl}
	mock.recorder = &MockRedisMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedis) EXPECT() *MockRedisMockRecorder {
	return m.recorder
}

// RedisGet mocks base method.
func (m *MockRedis) RedisGet(ctx context.Context, key string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RedisGet", ctx, key)
	ret0, _ := ret[0].(string)
	return ret0
}

// RedisGet indicates an expected call of RedisGet.
func (mr *MockRedisMockRecorder) RedisGet(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RedisGet", reflect.TypeOf((*MockRedis)(nil).RedisGet), ctx, key)
}

// RedisSet mocks base method.
func (m *MockRedis) RedisSet(ctx context.Context, key string, value any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RedisSet", ctx, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// RedisSet indicates an expected call of RedisSet.
func (mr *MockRedisMockRecorder) RedisSet(ctx, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RedisSet", reflect.TypeOf((*MockRedis)(nil).RedisSet), ctx, key, value)
}
